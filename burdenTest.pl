#!/usr/bin/env perl
use strict;
use warnings;
use Statistics::R;
use Getopt::Long;

my %opts = (); 
GetOptions
(
    \%opts,
    's|skip_zeroes',
    'p|sort_by_pvalue',
    'h|help',
) or usage("Syntax error!\n");
usage() if $opts{h};
usage("Please provide exactly 2 input files") if @ARGV != 2;
sub usage{
    my $msg = shift;
    print STDERR "\n$msg\n" if $msg;
    print STDERR <<EOT

USAGE: 

$0 cohort.gene_counts control.gene_counts 

OPTIONS:
    
   -s,--skip_zeroes
        Skip gene counts which have zero functional variants in test cases

   -p,--sort_by_pvalue
        Output in order of p-value rather than input order.

   -h,--help
        Show this message and exit


DESCRIPTION: 

Performs Fisher's Exact test on gene count files generated by
getFunctionalVariants.pl.

EOT
    ;
    exit 1 if $msg;
    exit;
}

my $test = shift;
my $control = shift;

my %test_counts = readCounts($test); 
my %control_counts = readCounts($control); 
my $test_total = 0;
my $control_total = 0;
my @results = (); 
my %cumulative = (); 
my $R = Statistics::R->new() ;
$R->start_sharedR ;
foreach my $k (sort keys %test_counts){
    my ($gene, $symbol) = split(",", $k);
    if ($opts{s} and $test_counts{$k}->{func} == 0){
        next;
    }
    if (not exists $control_counts{$k}){
        warn "$gene/$symbol not found in control file ($control)!\n";
        next;
    }
    my $counts = join
    (   ",", 
        $test_counts{$k}->{func},
        $test_counts{$k}->{other},
        $control_counts{$k}->{func},
        $control_counts{$k}->{other}
    );
    $test_total = $test_counts{$k}->{func} + $test_counts{$k}->{other};
    $control_total = $control_counts{$k}->{func} + $control_counts{$k}->{other};
    $cumulative{test}->{func} += $test_counts{$k}->{func};
    $cumulative{control}->{func} += $control_counts{$k}->{func};
    my $matrix = "matrix(c($counts), nrow = 2, ncol = 2)";
    $R->send("fresult <- fisher.test($matrix, alternative='greater')\$p.value");
    $R->send("cat(fresult)"); 
    my $output = $R->read();
    push @results, 
    [
        $output,
        $k,
        $test_counts{$k}->{func},
        $test_counts{$k}->{other},
        $control_counts{$k}->{func},
        $control_counts{$k}->{other},
    ];
}
if ($opts{p}){
    @results = sort byPvalue @results; 
}
map { print join ("\t", @{$results[$_]} ) . "\n" } 0..$#results;

##################################################
sub byPvalue{
    return $a->[0] <=> $b->[0];
}


##################################################
sub readCounts{
    my $in = shift;
    open (my $COUNTS, "<", $in) or die "Could not open $in for reading: $!\n";
    my %counts = ();
    while (my $line = <$COUNTS>){
        chomp $line;
        my @split = split("\t", $line); 
        die "Expected 4 fields, found " . scalar(@split) . 
          " for line:\n$line\n"
          if @split != 4;
        my ($gene, $symbol, $func, $other) = @split;#for readability
        $counts{"$gene,$symbol"}->{func}  = $func;
        $counts{"$gene,$symbol"}->{other} = $other;
    }
    return %counts;
}



