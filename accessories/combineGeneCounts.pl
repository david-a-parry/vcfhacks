#!/usr/bin/env perl
use strict;
use warnings;

usage("Please provide at least 2 input files") if @ARGV < 2;
my @files = @ARGV;
sub usage{
    my $msg = shift;
    print STDERR "\n$msg\n" if $msg;
    print STDERR <<EOT

USAGE: 

$0 cohort1.gene_counts cohort2.gene_counts [...cohortN.gene_counts]

DESCRIPTION: 

Combines gene counts files generated by getFunctionalVariants.pl.
Assumes absence of a count for a given gene in one file (but present in another)
means that all samples in that file do not have a qualifying variant for that
gene.

EOT
    ;
    exit 1 if $msg;
    exit;
}
my %all_genes      = ();
my %file_to_counts = ();
my %sample_totals  = ();
foreach my $in (@files){
    open (my $COUNTS, "<", $in) or die "Could not open $in for reading: $!\n";
    while (my $line = <$COUNTS>){
        chomp $line;
        my @split = split("\t", $line); 
        die "Expected 4 fields, found " . scalar(@split) . 
          " for line:\n$line\n"
          if @split != 4;
        my ($gene, $symbol, $func, $other) = @split;#for readability
        $file_to_counts{$in}->{"$gene,$symbol"}->{func}  = $func;
        $file_to_counts{$in}->{"$gene,$symbol"}->{other} = $other;
        $all_genes{"$gene,$symbol"} = undef;
        if (not $sample_totals{$in}){
            $sample_totals{$in} = $func + $other; 
        }elsif ($sample_totals{$in} != ($func + $other) ){
            die "Inconsistent total number of samples in $in!\n";
        }
    }
}

foreach my $k (sort keys %all_genes){
    my ($gene, $symbol) = split(",", $k);
    my $func  = 0;
    my $other = 0;
    foreach my $in ( @files){
        if (exists $file_to_counts{$in}->{$k}){
            $func  += $file_to_counts{$in}->{$k}->{func};
            $other += $file_to_counts{$in}->{$k}->{other};
        }else{
            $other += $sample_totals{$in};
        }
    }
    print join("\t", $gene, $symbol, $func, $other) . "\n";
}
